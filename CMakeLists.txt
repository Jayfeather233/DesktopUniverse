cmake_minimum_required(VERSION 3.11)

project(DUS)

add_definitions(-DGLM_ENABLE_CXX_17 -DGLM_ENABLE_SIMD_AVX2)

find_package(glfw3 REQUIRED)
find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(fmt REQUIRED)
find_package(Freetype REQUIRED)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)
include_directories(${fmt_INCLUDE_DIRS})
include_directories(${GLFW_INCLUDE_DIRS})
include_directories(${OPENGL_INCLUDE_DIRS})
include_directories(${GLEW_INCLUDE_DIRS})
include_directories(${FREETYPE_INCLUDE_DIRS})

include_directories("./src")
include_directories("./src/opengl")
include_directories("./src/basic")
include_directories("./lib/imgui")
include_directories("./lib/imgui/backends")
# include_directories("./lib/erfa/src")

aux_source_directory(./src MAIN_SOURCES)
aux_source_directory(./src/opengl OGL_SOURCES)
aux_source_directory(./src/basic BASIC_SOURCES)
aux_source_directory(./lib/imgui IMGUI_SOURCES)
# aux_source_directory(./lib/erfa/src ERFA_SOURCES)

list(APPEND  IMGUI_SOURCES ./lib/imgui/backends/imgui_impl_glfw.cpp ./lib/imgui/backends/imgui_impl_opengl3.cpp)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/dtf2d.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/utctai.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/taitt.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/dtdb.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/tttdb.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/dat.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/jd2cal.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/cal2jd.c)
# list(APPEND ERFA_SOURCES ./lib/erfa/src/erfadatextra.c)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -g")
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  add_link_options("-fuse-ld=lld")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fstandalone-debug")
endif()

add_executable(${PROJECT_NAME} ${MAIN_SOURCES} ${OGL_SOURCES} ${BASIC_SOURCES} ${IMGUI_SOURCES} ${ERFA_SOURCES})

find_package(jsoncpp REQUIRED)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${JSONCPP_LIBRARIES})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC -ljsoncpp)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC -lm)
target_link_libraries(${PROJECT_NAME} PUBLIC fmt::fmt)
target_link_libraries(${PROJECT_NAME} PUBLIC glfw)
target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC ${GLEW_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen)
target_link_libraries(${PROJECT_NAME} PUBLIC ${FREETYPE_LIBRARIES})